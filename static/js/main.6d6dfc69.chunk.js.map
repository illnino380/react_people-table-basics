{"version":3,"sources":["components/PageNavLinks/PageNavLinks.tsx","api.ts","components/Loader/Loader.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["PageNavLinks","className","isActive","classNames","to","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","ok","Error","status","json","Loader","PeopleTable","React","memo","props","people","useParams","slug","currentSlug","map","person","name","sex","born","died","fatherName","motherName","mother","father","PeoplePage","useState","setPeople","hasError","setHasError","isLoading","setIsLoading","useEffect","catch","finally","preparedPeople","useMemo","_","array","personMother","find","personFather","length","App","role","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.6d6dfc69.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const PageNavLinks: FC = () => (\n  <div className=\"navbar-brand\">\n    <NavLink\n      className={({ isActive }) => (\n        classNames(\n          'navbar-item',\n          { 'has-background-grey-lighter': isActive },\n        )\n      )}\n      to=\"/\"\n    >\n      Home\n    </NavLink>\n\n    <NavLink\n      className={({ isActive }) => (\n        classNames(\n          'navbar-item',\n          { 'has-background-grey-lighter': isActive },\n        )\n      )}\n      to=\"people\"\n    >\n      People\n    </NavLink>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status}`);\n      }\n\n      return response.json();\n    });\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleTable: FC<Props> = React.memo((props) => {\n  const { people } = props;\n\n  const { slug: currentSlug = '/' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      {people.map(person => {\n        const {\n          name,\n          sex,\n          born,\n          died,\n          fatherName,\n          motherName,\n          slug,\n          mother,\n          father,\n        }\n   = person;\n\n        return (\n          <tbody>\n            <tr\n              data-cy=\"person\"\n              className={classNames('', {\n                'has-background-warning': slug === currentSlug,\n              })}\n              key={slug}\n            >\n              <td>\n                <Link\n                  to={`/people/${slug}`}\n                  className={classNames('', {\n                    'has-text-danger': person.sex === 'f',\n                  })}\n                >\n                  {name}\n                </Link>\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother?.name\n                  ? (\n                    <Link\n                      to={`/people/${mother.slug}`}\n                      className=\"has-text-danger\"\n                    >\n                      {motherName}\n                    </Link>\n                  )\n                  : motherName ?? '-'}\n              </td>\n              <td>\n                {father?.name\n                  ? <Link to={`/people/${father.slug}`}>{fatherName}</Link>\n                  : fatherName ?? '-'}\n              </td>\n            </tr>\n          </tbody>\n        );\n      })}\n    </table>\n  );\n});\n","import {\n  FC, useEffect, useMemo, useState,\n} from 'react';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedPeople = useMemo(() => {\n    return people.map((person, _, array) => {\n      const personMother = array\n        .find(mother => mother.name === person.motherName) || null;\n      const personFather = array\n        .find(father => father.name === person.fatherName) || null;\n\n      return {\n        ...person,\n        mother: personMother,\n        father: personFather,\n      };\n    });\n  }, [people]);\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n        {(isLoading && people.length === 0)\n          && (<Loader />)}\n\n        {hasError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n\n        {(!isLoading && people.length === 0)\n          && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n        {(!isLoading && people.length > 0)\n          && <PeopleTable people={preparedPeople} />}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { PageNavLinks } from './components/PageNavLinks';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nexport const App: FC = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <PageNavLinks />\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n            <Route\n              path=\"home\"\n              element={<Navigate to=\"/\" replace />}\n            />\n            <Route\n              path=\"/\"\n              element={<h1 className=\"title\">Home Page</h1>}\n            />\n            <Route path=\"people\">\n              <Route\n                index\n                element={(\n                  <>\n                    <h1 className=\"title\">People Page</h1>\n                    <PeoplePage />\n                  </>\n                )}\n              />\n              <Route\n                path=\":slug\"\n                element={(\n                  <>\n                    <h1 className=\"title\">People Page</h1>\n                    <PeoplePage />\n                  </>\n                )}\n              />\n            </Route>\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}